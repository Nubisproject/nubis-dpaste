#!/bin/bash
#
# This script is run on every ami change.
#+ This is the place to do things like database initilizations and migrations.
#
#set -x

LOGGER_BIN='/usr/bin/logger'

# Set up the logger command if the binary is installed
if [ ! -x $LOGGER_BIN ]; then
    echo "ERROR: 'logger' binary not found - Aborting"
    echo "ERROR: '$BASH_SOURCE' Line: '$LINENO'"
    exit 2
else
    LOGGER="$LOGGER_BIN --stderr --priority local7.info --tag migrate.sh"
fi

# Source the consul connection details from the metadata api
eval `curl -fq http://169.254.169.254/latest/user-data`

# Check to see if NUBIS_MIGRATE was set in userdata. If not we exit quietly.
if [ ${NUBIS_MIGRATE:-0} == '0' ]; then
    exit 0
fi

# Set up the consul url
CONSUL="http://localhost:8500/v1/kv/$NUBIS_STACK/$NUBIS_ENVIRONMENT/config"

# We run early, so we need to account for Consul's startup time, unfortunately, magic isn't
# always free
CONSUL_UP=-1
COUNT=0
while [ "$CONSUL_UP" != "0" ]; do
    if [ ${COUNT} == "6" ]; then
        $LOGGER "ERROR: Timeout while attempting to connect to consul."
        exit 1
    fi
    QUERY=`curl -s ${CONSUL}?raw=1`
    CONSUL_UP=$?

    if [ "$QUERY" != "" ]; then
        CONSUL_UP=-2
    fi

    if [ "$CONSUL_UP" != "0" ]; then
      $LOGGER "Consul not ready yet ($CONSUL_UP). Sleeping 10 seconds before retrying..."
      sleep 10
      COUNT=${COUNT}+1
    fi
done

# Generate and set the secrets for the app
DB_NAME=`curl -s ${CONSUL}'/DB_NAME?raw=1'`
if [ "$DB_NAME" == "" ]; then
    DB_NAME='dpaste'
    curl -s -X PUT -d $DB_NAME $CONSUL/DB_NAME
fi
$LOGGER " + DB_NAME=$DB_NAME"

DB_USERNAME=`curl -s ${CONSUL}'/DB_USERNAME?raw=1'`
if [ "$DB_USERNAME" == "" ]; then
    DB_USERNAME='dpaste'
    curl -s -X PUT -d $DB_USERNAME $CONSUL/DB_USERNAME
fi
$LOGGER " + DB_USERNAME=$DB_USERNAME"

DB_PASSWORD=`curl -s ${CONSUL}'/DB_PASSWORD?raw=1'`
if [ "$DB_PASSWORD" == "" ]; then
    DB_PASSWORD=`makepasswd --minchars=12 --maxchars=16`
    curl -s -X PUT -d $DB_PASSWORD $CONSUL/DB_PASSWORD
fi
$LOGGER " + DB_PASSWORD=$DB_PASSWORD"

DB_SERVER=`curl -s ${CONSUL}'/DB_SERVER?raw=1'`
if [ "$DB_SERVER" == "" ]; then
    DB_SERVER='localhost'
    curl -s -X PUT -d $DB_SERVER $CONSUL/DB_SERVER
fi
$LOGGER " + DB_SERVER=$DB_SERVER"

APP_SECRET_KEY=`curl -s ${CONSUL}'/APP_SECRET_KEY?raw=1'`
if [ "$APP_SECRET_KEY" == "" ]; then
    APP_SECRET_KEY=`uuidgen`
    curl -s -X PUT -d $APP_SECRET_KEY $CONSUL/APP_SECRET_KEY
fi
$LOGGER " + APP_SECRET_KEY=$APP_SECRET_KEY"

# Reset the database password on first run
# Create mysql defaults file
echo -e "[client]\npassword=$DB_PASSWORD\nhost=$DB_SERVER\nuser=$DB_USERNAME" > .DB_DEFAULTS
# Test the current password
TEST_PASS=`mysql --defaults-file=.DB_DEFAULTS $DB_NAME -e "show tables" 2>&1`
if [ `echo $TEST_PASS | grep -c 'ERROR 1045'` == 1 ]; then
    # Use the provisioner password to change the password
    echo -e "[client]\npassword=provisioner_password\nhost=$DB_SERVER\nuser=$DB_USERNAME" > .DB_DEFAULTS
    $LOGGER "Detected provisioner passwrod, reseting database password."
    mysql --defaults-file=.DB_DEFAULTS $DB_NAME -e "SET PASSWORD FOR '$DB_USERNAME'@'%' = password('$DB_PASSWORD')"
    RV=$?
    if [ $RV != 0 ]; then
        $LOGGER "ERROR: Could not access mysql database ($RV), aborting."
        rm -f .DB_DEFAULTS
        exit $RV
    fi
    # Rewrite defaults file with updated password
    echo -e "[client]\npassword=$DB_PASSWORD\nhost=$DB_SERVER\nuser=$DB_USERNAME" > .DB_DEFAULTS
fi

# Clean up
rm -f .DB_DEFAULTS

# Ensure confd has generated the settings file before running db migrations
DPASTE_FILE='/etc/nubis-config/dpaste.sh'
COUNT=0
while [ "${FILE_EXISTS:--1}" != "0" ]; do
    if [ ${COUNT} == "6" ]; then
        $LOGGER "ERROR: Timeout while waiting for ${DPASTE_FILE}."
        exit 1
    fi
    FILE_EXISTS=$(eval \[ -f /etc/nubis-config/dpaste.sh \]; echo $?)

    if [ "${FILE_EXISTS}" != "0" ]; then
      $LOGGER "${DPASTE_FILE} not ready yet (${FILE_EXISTS}). Sleeping 10 seconds before retrying..."
      sleep 10
      COUNT=${COUNT}+1
    fi
done

# Run the database migrations
#+ This command is safe to run multiple times
$LOGGER "Performing DB migrations"
/var/www/dpaste/manage.py syncdb --migrate
RV=$?
if [ $RV != 0 ]; then
    $LOGGER "ERROR: Error running database migrations ($RV), aborting."
    exit $RV
fi
